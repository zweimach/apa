use cynic/prelude::*
use cynic/testing::{assert}
use cynic/error::{self, AnyError}
use skeptic/prelude::*
use skeptic/debug::{print}

fun main() {
    // integers
    const onePlusOne: Int32 = 1 + 1
    print("1 + 1 = {}\n", {onePlusOne})

    // floats
    const sevenDivThree: Float32 = 7.0 / 3.0
    print("7.0 / 3.0 = {}\n", {sevenDivThree})

    // boolean
    print("{}\n{}\n{}\n", {True && False, True || False, !True})

    // optional
    var optionalValue: Maybe<String> = Nothing
    assert(optionalValue == Nothing)

    print("\noptional 1\ntype: {s}\nvalue: {s}\n", {typeOf(optionalValue), optionalValue})

    optionalValue = "hi" |> Just
    assert(optionalValue != Nothing)

    print("\noptional 2\ntype: {s}\nvalue: {s}\n", {typeOf(optionalValue), optionalValue})

    // error union
    var numberOrError: Result<AnyError, Int32> = error::ArgNotFound

    print("\nerror union 1\ntype: {s}\nvalue: {s}\n", {typeOf(numberOrError), numberOrError})

    numberOrError = 1234 |> Ok

    print("\nerror union 2\ntype: {s}\nvalue: {s}\n", {typeOf(numberOrError), numberOrError})
}
