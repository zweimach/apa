use cynic/prelude::*;
use skeptic/prelude::*;
use skeptic/data::*;
use skeptic/mem::{Allocator, AllocError};
use skeptic/testing;
use skeptic/testing/assert;

pub fn isValid(allocator: Allocator, xs: String) AllocError!Bool {
    implicit Allocator = allocator;

    const f = \c -> {
        switch c {
            '}' => '{',
            ']' => '[',
            ')' => '(',
            _ => '\0',
        }
    }

    var s = Stack[Char]::new(_&_).?;
    defer s->delete;

    for const c in xs->iter {
        switch s->last {
            Just{n} if n.* == f(c.*) => s->pop,
            Nothing => s->push(c.*).?,
        }
    }

    s->isEmpty |> Ok
}

[[test]]
fn testIsValid() AllocError!Unit {
    implicit Allocator = testing::allocator;

    "{}[]()"
        |> isValid(_&_, _).?
        |> assert::isTrue(_);

    ")(}{]["
        |> isValid(_&_, _).?
        |> assert::isFalse(_);
}
